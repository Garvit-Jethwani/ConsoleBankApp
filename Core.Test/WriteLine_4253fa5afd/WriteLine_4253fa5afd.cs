// ********RoostGPT********
// Test generated by RoostGPT for test csharp-test using AI Type Open AI and AI Model gpt-4



// ********RoostGPT********
using System;
using NUnit.Framework;
using Core.Services;
using System.IO;
using Moq;  // Add this to use Mock

namespace Core.Test
{
    [TestFixture]
    public class WriteLine_4253fa5afd
    {
        private StringWriter _stringWriter;
        private TextWriter _originalOutput;

        [SetUp]
        public void SetUp()
        {
            _stringWriter = new StringWriter();
            _originalOutput = Console.Out;
            Console.SetOut(_stringWriter);
        }

        [TearDown]
        public void TearDown()
        {
            Console.SetOut(_originalOutput);
            _stringWriter.Dispose();
        }

        [Test]
        public void Run_ChoiceIs1_CallsSignUp()
        {
            // Arrange
            var _rep = new Mock<IRepository>(); // Change this to use Moq
            _rep.Setup(r => r.SignUp()).Verifiable();
            var sut = new MyClass(_rep.Object);

            // Act
            Console.SetIn(new StringReader("1"));
            sut.Run();

            // Assert
            _rep.Verify(r => r.SignUp(), Times.Once);
        }

        [Test]
        public void Run_ChoiceIs2_CallsLogin()
        {
            // Arrange
            var _rep = new Mock<IRepository>(); // Change this to use Moq
            _rep.Setup(r => r.Login()).Verifiable();
            var sut = new MyClass(_rep.Object);

            // Act
            Console.SetIn(new StringReader("2"));
            sut.Run();

            // Assert
            _rep.Verify(r => r.Login(), Times.Once);
        }

        [Test]
        public void Run_ChoiceIs3_CallsExit()
        {
            // Arrange
            var _rep = new Mock<IRepository>(); // Change this to use Moq
            var sut = new MyClass(_rep.Object);

            // Act
            Console.SetIn(new StringReader("3"));
            Assert.Throws<ExitException>(() => sut.Run());
        }

        [Test]
        public void Run_ChoiceIsInvalid_RunsAgain()
        {
            // Arrange
            var _rep = new Mock<IRepository>(); // Change this to use Moq
            _rep.Setup(r => r.Run()).Verifiable();
            var sut = new MyClass(_rep.Object);

            // Act
            Console.SetIn(new StringReader("invalid\n3"));
            Assert.Throws<ExitException>(() => sut.Run());

            // Assert
            _rep.Verify(r => r.Run(), Times.AtLeastOnce);
        }
    }
}
